name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build SDK
      run: npm run build
    
    - name: Run tests
      run: npm test
      env:
        # Mock environment for testing in release
        LIVEKIT_API_KEY: ${{ secrets.LIVEKIT_API_KEY != '' && secrets.LIVEKIT_API_KEY || 'test-key' }}
        LIVEKIT_API_SECRET: ${{ secrets.LIVEKIT_API_SECRET != '' && secrets.LIVEKIT_API_SECRET || 'test-secret' }}
        LIVEKIT_URL: ${{ secrets.LIVEKIT_URL != '' && secrets.LIVEKIT_URL || 'ws://localhost:7881' }}
        CI: true
    
    - name: Validate bundle
      run: |
        # Check that dist files exist
        test -f dist/index.cjs.js
        test -f dist/index.esm.js
        test -f dist/index.d.ts
        echo "✓ All required bundle files exist"
    
    - name: Bundle size audit
      run: node tsup-bundle-summary.js
    
    - name: Check bundle size limits
      run: |
        # Get bundle sizes
        CJS_SIZE=$(stat -c%s dist/index.cjs.js)
        ESM_SIZE=$(stat -c%s dist/index.esm.js)
        
        # Convert to KB
        CJS_KB=$((CJS_SIZE / 1024))
        ESM_KB=$((ESM_SIZE / 1024))
        
        echo "Bundle sizes: CJS=${CJS_KB}KB, ESM=${ESM_KB}KB"
        
        # Fail if bundles are too large (50KB limit)
        if [ $CJS_KB -gt 50 ]; then
          echo "❌ CJS bundle too large: ${CJS_KB}KB > 50KB"
          exit 1
        fi
        
        if [ $ESM_KB -gt 50 ]; then
          echo "❌ ESM bundle too large: ${ESM_KB}KB > 50KB"
          exit 1
        fi
        
        echo "✓ Bundle sizes within limits"
    
    - name: Validate Helm Chart
      run: |
        # Lint the Helm chart
        helm lint ./helm/webrtc-client-sdk
        
        # Test template rendering
        helm template test-release ./helm/webrtc-client-sdk --dry-run
        
        echo "✓ Helm chart validation passed"
    
    - name: Check and update version consistency
      run: node scripts/check-version-consistency.js --fix
    
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Verify package version
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        if [ "$PACKAGE_VERSION" != "${{ steps.version.outputs.VERSION }}" ]; then
          echo "❌ Package version ($PACKAGE_VERSION) doesn't match tag version (${{ steps.version.outputs.VERSION }})"
          exit 1
        fi
        echo "✓ Package version matches tag"
    
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Notify Frontend of New SDK Version
      run: |
        curl -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.FRONTEND_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/fanoo2/frontend/dispatches" \
          -d '{
            "event_type": "webrtc-client-updated",
            "client_payload": {
              "version": "${{ steps.version.outputs.VERSION }}",
              "package_name": "@fanno/webrtc-client",
              "npm_install_command": "npm install @fanno/webrtc-client@${{ steps.version.outputs.VERSION }}",
              "repository": "${{ github.repository }}",
              "tag": "${{ github.ref }}",
              "release_url": "https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.VERSION }}"
            }
          }' \
          --max-time 30 \
          --retry 3 \
          --retry-delay 5 \
          || echo "Warning: Failed to notify frontend repository"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          Release ${{ steps.version.outputs.VERSION }}
          
          ### Bundle Information
          
          Built and published with bundle size validation.
          
          ### Installation
          
          **NPM Package:**
          ```bash
          npm install @fanno/webrtc-client@${{ steps.version.outputs.VERSION }}
          ```
          
          **Docker Image:**
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
          ```
          
          **Helm Chart:**
          ```bash
          helm install webrtc-sdk ./helm/webrtc-client-sdk --set image.tag=${{ steps.version.outputs.VERSION }}
          ```
        draft: false
        prerelease: false